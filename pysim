#!/data/ana/epd/bin/python2.7
"""
Randomly places molecules in space with a certain density, Boltzmann distribution and computes the scattering in the concentrated limit.
This method does not use cython-made c wrappers, instead it relies on numpy and will therefore have horrible memory mangement. BEWARE if you are trying to simulate a big system, as you might not have enough RAM!
This method does not compute exact atomic form factors but instead approximates each atoms form factor as that of nitrogen.
"""

import os
import numpy as np
from scipy.spatial import Delaunay
import argparse

from thor.scatter import atomic_formfactor as AF
from thor.xray import _q_grid_as_xyz as QXYZ
from thor.xray import Beam,Rings
from thor.structure import rand_rotate_molecule2, load_coor, remove_COM


def locate(xyz, num_replicas, density):
    """
    Take a structure and generate a system of many conformations, such that they
    are randomly distributed & rotated in space with a given `density`.
    
    This function is useful for approximating a subset of a homogenous solution,
    gas, slurry, etc. composed of the structures indicated by `xyz`.
    
    Parameters
    ----------
    xyz : np.array, float
        atomic positions of sample; shape =  ( num_atoms, 3).
    
    num_replicas : int
        The total number of molecules to include in the system. The total volume
        of the system depends on this parameter and `density`.
        
    density : float
        The number density of species, MICROMOLAR UNITS. That is, umol/L. (This
        software was written by a chemist!).
    
    Returns
    -------
    centers_of_mass : np.array
        The center of masses of each placed structure.
    """
#   determine the box size
    boxvol  = (num_replicas * 1.0e24) / (density * 6.02e17) # in nm^3
    boxsize = np.power(boxvol, 1/3.)            # one dim of a cubic box, in nm

    max_radius = np.max( np.sqrt( np.sum(np.power(xyz , 2), axis=1) ) )
    if boxsize < max_radius*2:
        raise ValueError('You solution is too concentrated for its constituent'
                         ' matter! There is no way it will fit. Box: '
                         '%f, Biggest Molecule: %f' % (boxsize, np.max(max_radius)))
        
    centers_of_mass = np.zeros((num_replicas, 3)) # to store these and use later
    centers_of_mass[0] = np.random.uniform(low=0, high=boxsize, size=3)

    for i in xrange(1, num_replicas ):
        molecule_overlapping = True # initial cond.
        
        attempt = 0
        while molecule_overlapping:
            
            attempt += 1
        
            # suggest a random translation
            centers_of_mass[i] = np.random.uniform(low=0, high=boxsize, size=3)
            
            # check to see if we're overlapping another molecule already placed
            for j in xrange(i):
                molec_dist = np.linalg.norm(centers_of_mass[i] - centers_of_mass[j])
                min_allowable_dist = 2 * max_radius
                
                if molec_dist > min_allowable_dist:
                    # if not, move the molecule there and do a rotation.
                    molecule_overlapping = False
                else:
                    molecule_overlapping = True
                    break
                    
            if attempt > 10000:
                raise RuntimeError('Number of attempts > 10000, density is too high.')
        print "placed molecule, took", attempt, "attempts." 

    return centers_of_mass

def place(xyz, location, vac, dist="False"):
    xyz2 = np.copy( xyz )

#   apply lattice distortions 
    if dist:
        xyz2 = distort( xyz2 )

#   apply random rotation
    xyz2 = rand_rotate_molecule2(xyz2)

#   translate
    for x in xrange(3):
        xyz2[:,x] += location[x]

#   convert to angstroms
    xyz2 *= 10.

#   apply vacancies
    if vac > 0 :
        xyz2   = vacancies( xyz2 , vac )

    return xyz2

def vacancies( xyz, perc_mean = 0, perc_var = None) :
    """
    Add atom vacancies to structures, mainly used in 
    nano particle simulations
    
    Parameters
    ----------
    xyz : np.array, float
        atomic positions of sample; shape =  ( num_atoms, 3).
    
    perc_mean : float
        Percentage of vacant atoms

    perc_var : float
        The actual percentage of vacant atoms will be based on
        gaussian random number with 'center = perc_mean' and 
        'width = per_var'

    Returns
    -------
    None : void
    """

    if perc_mean == 0:
        return xyz

    if perc_var == None:
        perc_var = perc_mean/2.
    num_atoms = xyz.shape[0]
    num_vac   = np.random.normal( perc_mean * num_atoms, perc_var * num_atoms  )
    if num_vac > 0 and num_vac < num_atoms:
#       determine vacancy locations
        np.random.seed()
        num_vac        =  int ( num_vac ) 
        new_atom_inds  =  np.random.permutation( num_atoms ) [ 0 : num_atoms - num_vac]
#       remove the vacant atoms
        new_xyz        =  xyz[ new_atom_inds ]

        return new_xyz

    elif num_vac <= 0 :
        return xyz
        
    else :
        raise ValueError('The number of vacancies is greater than the number of atoms. \
                        Consider lowering the perc_mean and perc_var.') 

def distort(  xyz_orig, mean_sub= "False"):
    """This will likely change the total number of atoms. Also in need of
        script to remove over-lapping atoms as there are likely a few."""

    print "--> Distorting the lattice"

    xyz = np.copy( xyz_orig ) 

    if mean_sub:
        rad = xyz.mean()
        xyz -= rad

    if not mean_sub:
        rad = max( sqrt( sum( xyz**2,1 ) ) )

#   POINTS WHICH WILL DEFINE THE TRIANGULATION
#   -careful to ensure that triangulation encompases whole nano particle
#   triangulate region defined by points ( a cube of side-length =  box )
    box = np.round( rad,0 )
    points = np.array( [[-box,-box,-box], # corner 1
                        [-box,-box,box],   # corner 2
                        [-box,box,-box],  # corner 3
                        [-box,box,box],  # corner 4
                        [box,-box,-box],  # corner 5
                        [box,-box,box],  # corner 6
                        [box,box,-box],  # corner 7
                        [box,box,box],  # corner 8
                        #np.random.uniform(-box/5.,box/10.,3), # random point in the NP
                        [0,0,0], # center
                        [0,-box,0],  # face 1
                        [0,box,0], # face 2
                        [0,0,-box], # face 3
                        [0,0,box], # face 4
                        [-box,0,0], # face 5
                        [box,0,0] ])# face 6

#   do a random triangulation
    D = Delaunay ( rand_rotate_molecule2( points  ) )

#   determine the number of partitions according to the triangulation
    X,Y,Z = np.mgrid[ -rad:rad:100j, -rad:rad:100j, -rad:rad:100j ]
    R = np.sqrt( X**2 + Y**2 + Z** 2 )
    SPHERE = R < rad
    SPHERE = np.array(  [X[SPHERE], Y[SPHERE], Z[SPHERE] ] ).T # a list of points 
                                                               #  inside the NP volume
#   the simplex(s) which divide the NP
    simps = np.unique ( D.find_simplex( SPHERE ) ) 

#   for each simplex generate a rotated NP 
#   and save the atoms that are within the simplex
    new_xyz = np.empty( (0,3) )
    for i in xrange( simps.shape[0] ):
        rot_xyz   =  rand_rotate_molecule2( xyz )
        rot_xyz   =  rot_xyz[ D.find_simplex( rot_xyz) == simps[i]  ] 
        new_xyz   = np.vstack( ( new_xyz, rot_xyz )  ) 

    np.savetxt("test.coor",new_xyz,delimiter = ' ')

    return new_xyz


def main(num_shot, traj, num_mol, dens, energy, qs, num_phi, vac, outfile, dist=False, dilute=True ):
    
    xyz = traj.xyz[0]  # IN NANOMETERS!!

    #atom_numbs  = np.array([ a.element.atomic_number for a in traj.topology.atoms() ])
 
    #atom_numbs = np.unique(atom_numb)

    #n_atom_type = len( atom_numbs ) 

    #for i in xrange( ):

    #atom_keys = map ( lambda x: str( x ) , list (atom_numbs ) )

    #D = dict (  [ (atom_numbs[i], FF[i]) for i in xrange( len( atom_numbs) ]  )

    intens = np.zeros( (num_shot, qs.shape[0], num_phi) )

    qs       = np.array( qs )
    num_q    = qs.shape[0]
    num_atom = xyz.shape[0]
    qvec     = QXYZ(  qs, num_phi, Beam(-1,energy=energy).k ).reshape( (num_q, num_phi, 3 )  )
    
    FF = np.zeros( num_q, dtype=np.complex128 )
    for i_q in xrange( num_q ) :
#       approx with nitrogen
        FF[i_q] =  AF( 79, qs[i_q] ).astype(np.complex128)

    if dilute:
        outfile = os.path.join( os.path.dirname(outfile) , \
                    'dilu-' + os.path.basename(outfile ) )
        for i_shot in xrange( num_shot ) :
            print "computing shot number",i_shot
            scatter    = np.zeros( ( num_q, num_phi)  )
            xyzs  = ( place( xyz, np.zeros(3), vac, dist )  for i_mol in xrange(num_mol)  )
            
            for i_mol in xrange( num_mol ):
                xyz_next   = xyzs.next() 
                scatter += np.abs( amplitudes( qvec, xyz_next, FF, num_q, num_phi) ) **2
            
            intens[i_shot] =  scatter 
        
            r = Rings (qs, intens[:i_shot], Beam(-1,energy=energy).k )
            r.save( outfile, force=1)

    else:
        outfile = os.path.join( os.path.dirname(outfile) , \
                    'conc-' + os.path.basename(outfile ) )
        for i_shot in xrange( num_shot ) :
            amps    = np.zeros( ( num_q, num_phi) , dtype=np.complex128 )
            print "computing shot number",i_shot
            COM     = locate( xyz, num_mol, dens )
            xyzs  = ( place( xyz, COM[i_mol], vac, dist )  for i_mol in xrange(num_mol)  )
            
            for i_mol in xrange( num_mol ):
                xyz_next   = xyzs.next() # new_xyz are now in angstroms
                amps += amplitudes( qvec, xyz_next, FF, num_q, num_phi)
            
            intens[i_shot] =  np.abs( amps ) **2 
        
            r = Rings (qs, intens[:i_shot], Beam(-1,energy=energy).k )
            r.save( outfile, force=1)

def amplitudes( qvec,  xyz , FF,num_q,num_phi):
    """
    Calculates scattering amplitudes

    Parameters
    ----------
    enery : float
        energy in keV of the xray beam.

    qs : np.array, float
        a list of q values specifying which rings to simulate 
        onto ( inverse angstroms).

    num_phi : int
        number of polar pixels around each ring.

    xyz : np.array, float
        atomic positions of sample; shape =  ( num_atoms, 3).
    
    Returns
    -------
    amp : np.array, shape( len(qs), num_phi )
        the scattering amplitudes.
    """
    
    amplitude = np.zeros( (num_q, num_phi), dtype=np.complex128  )
    
#   in order to manage memory properly, we will step through the molecule in #  atomic groups of 5000
    num_steps = xyz.shape[0] / 5000
    last_step = xyz.shape[0] % 5000

    for i_q in xrange( num_q ):
        for i_step in xrange( num_steps ):
            amps = np.dot( qvec[i_q], xyz[i_step*5000:(i_step+1)*5000].T )
            amps = np.exp(  1j * amps  )
            amps = np.sum( amps, axis = 1 )
            amplitude[i_q,:]  +=  FF[i_q] * amps

        if last_step > 0:
            amps = np.dot( qvec[i_q], xyz[-last_step:].T )
            amps = np.exp(  1j * amps  )
            amps = np.sum( amps, axis = 1 )
            amplitude[i_q,:]  +=  FF[i_q] * amps

    return amplitude


if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()#desription=
                #'Make a odin .ring file containing the scattering from a system of molecules in the concentrated limit.')
    
    parser.add_argument('-i', '--input', type=str, 
                        help='A .coor file containing the atomic positions of a single molecule.')
    
    parser.add_argument('-n', '--num_mol', type=int, 
                        help='The number of molecules to include in the ensemble.')
    
    parser.add_argument('-m', '--num_shot', type=int, 
                        help='The number of shots/exposures.')
    
    parser.add_argument('-p', '--num_phi', type=int, 
                        help='The number of point pixels around each ring.')
    
    parser.add_argument('-d', '--density', type=float, 
                        help='The ensemble density, in micromolar.')
    
    parser.add_argument('-e', '--energy', type=float, 
                        help='The energy of the beam in keV.')
    
    parser.add_argument('-q', '--qfile', type=str, 
                        help='The name of a file containing the q_values (1 per line, in inverse angstroms ).')
    
    parser.add_argument('-v', '--vacancies', default=0, type=float,  
                        help='Fraction of total atoms that are vacant.')
    
    parser.add_argument('-o', '--output', default=None,
                        help='ring file to write output to.')
    
    parser.add_argument('-c', '--concentrate',
                        help='Compute simulations in the concentrated limit.')
    
    parser.add_argument('-D', '--distort',
                        help='Will attempt to distort the nano particles.')

    args = parser.parse_args()
   
    if args.input.endswith('.coor') or args.input.endswith('.xyz'):
        input_traj = load_coor( args.input) # loads xyz in nm
    else:
        raise ValueError('input file must be .coor' )

    if args.num_mol == None:
        raise ValueError('Pass a number of molecules using -n.')

    if type(args.num_mol) != np.int:
        raise ValueError( '-n option: number of molecules must be type int.' )
   
    if args.num_shot == None:
        raise ValueError('Pass a number of shots/exposures using -m.')
    
    if type(args.num_shot) != np.int:
        raise ValueError( '-m option: number of shots must be type int.' )
   
    if args.num_phi == None:
        raise ValueError('Pass a number of pixels per ring using -p.')
   
    if type(args.num_phi) != np.int:
        raise ValueError( '-p option: number of ring pixels must be type int.' )
    
    if args.density == None:
        raise ValueError('Pass a density in micro molar using -d.')
   
    if args.energy == None:
        raise ValueError('Pass a energy in angstrom using -e')
   
    if args.qfile == None:
        raise ValueError('Pass a name for a file containing q values (in inverse angstroms) using -q')
    
    if args.concentrate:
        dilu = False
    else:
        dilu = True

    if args.distort:
        dist = True
    else:
        dist = False

    qs = np.loadtxt(args.qfile, ndmin=1)
   
    if args.output == None:
        outfile  = map( lambda x:str(x), [args.num_shot,'sh', args.num_mol,'m', args.density,'d', args.energy,'w', args.num_phi,'ph'] + list(qs) + ['q'] + [args.input]  )
        outfile  = '-'.join( outfile ) + '.ring'
    else:
        outfile  = args.output
    
    main( args.num_shot, input_traj, args.num_mol, args.density, args.energy, qs, args.num_phi,  args.vacancies, outfile, dist, dilu)


